// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package did_optimize

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// DidOptimizeMetaData contains all meta data concerning the DidOptimize contract.
var DidOptimizeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousChange\",\"type\":\"uint256\"}],\"name\":\"DIDAttributeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"delegateType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousChange\",\"type\":\"uint256\"}],\"name\":\"DIDDelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousChange\",\"type\":\"uint256\"}],\"name\":\"DIDOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"approvals\",\"type\":\"uint256\"}],\"name\":\"PendingApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumEthereumDIDRegistryV2.ActionType\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"PendingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PendingExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTISIG_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validity\",\"type\":\"uint256\"}],\"name\":\"addDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approvePending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"changed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"identityOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upgrader\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"multisigs\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendings\",\"outputs\":[{\"internalType\":\"enumEthereumDIDRegistryV2.ActionType\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"approvals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"revokeAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"dt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"revokeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validity\",\"type\":\"uint256\"}],\"name\":\"setAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"delegateType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"validDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250348015610042575f80fd5b505f6100526101c360201b60201c565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff1614801561009a5750825b90505f60018367ffffffffffffffff161480156100cd57505f3073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156100db575080155b15610112576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561015f576001855f0160086101000a81548160ff0219169083151502179055505b83156101b9575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516101b0919061023f565b60405180910390a15b5050505050610258565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f819050919050565b5f61022961022461021f846101ea565b610206565b6101f3565b9050919050565b6102398161020f565b82525050565b5f6020820190506102525f830184610230565b92915050565b608051613e2661027e5f395f81816117a7015281816117fc01526119d90152613e265ff3fe60806040526004361061017f575f3560e01c806380b29f7c116100d0578063d2270f1211610089578063ea70b4af11610063578063ea70b4af14610593578063f00d4b5d146105bd578063f72c0d8b146105e5578063f96d0f9f1461060f5761017f565b8063d2270f1214610519578063d547741f14610541578063e328400c146105695761017f565b806380b29f7c146103fd5780638733d4e81461042557806391d1485414610461578063a217fddf1461049d578063a7068d66146104c7578063ad3cb1cc146104ef5761017f565b80634f1ef2861161013d57806370ae92d21161011757806370ae92d21461033157806377a24f361461036d5780637965df39146103955780637ad4b0a4146103d55761017f565b80634f1ef286146102af57806352d1902d146102cb578063622b2a3c146102f55761017f565b8062c023da1461018357806301ffc9a7146101ab5780632358d5a8146101e7578063248a9ca3146102235780632f2ff15d1461025f57806336568abe14610287575b5f80fd5b34801561018e575f80fd5b506101a960048036038101906101a49190612bf2565b61064b565b005b3480156101b6575f80fd5b506101d160048036038101906101cc9190612cb3565b6106fe565b6040516101de9190612cf8565b60405180910390f35b3480156101f2575f80fd5b5061020d60048036038101906102089190612d44565b610777565b60405161021a9190612cf8565b60405180910390f35b34801561022e575f80fd5b5061024960048036038101906102449190612d82565b6107a1565b6040516102569190612dbc565b60405180910390f35b34801561026a575f80fd5b5061028560048036038101906102809190612dd5565b6107cb565b005b348015610292575f80fd5b506102ad60048036038101906102a89190612dd5565b6107ed565b005b6102c960048036038101906102c49190612e13565b610868565b005b3480156102d6575f80fd5b506102df610887565b6040516102ec9190612dbc565b60405180910390f35b348015610300575f80fd5b5061031b60048036038101906103169190612e6d565b6108b8565b6040516103289190612cf8565b60405180910390f35b34801561033c575f80fd5b5061035760048036038101906103529190612ebd565b610972565b6040516103649190612ef7565b60405180910390f35b348015610378575f80fd5b50610393600480360381019061038e9190612f6d565b610987565b005b3480156103a0575f80fd5b506103bb60048036038101906103b69190612fde565b610bb7565b6040516103cc9594939291906130eb565b60405180910390f35b3480156103e0575f80fd5b506103fb60048036038101906103f69190613143565b610ca6565b005b348015610408575f80fd5b50610423600480360381019061041e9190612e6d565b610d5c565b005b348015610430575f80fd5b5061044b60048036038101906104469190612ebd565b610e0f565b60405161045891906131c3565b60405180910390f35b34801561046c575f80fd5b5061048760048036038101906104829190612dd5565b610eb2565b6040516104949190612cf8565b60405180910390f35b3480156104a8575f80fd5b506104b1610f23565b6040516104be9190612dbc565b60405180910390f35b3480156104d2575f80fd5b506104ed60048036038101906104e891906131dc565b610f29565b005b3480156104fa575f80fd5b50610503610fdf565b6040516105109190613292565b60405180910390f35b348015610524575f80fd5b5061053f600480360381019061053a9190612fde565b611018565b005b34801561054c575f80fd5b5061056760048036038101906105629190612dd5565b611240565b005b348015610574575f80fd5b5061057d611262565b60405161058a9190612dbc565b60405180910390f35b34801561059e575f80fd5b506105a7611286565b6040516105b49190612ef7565b60405180910390f35b3480156105c8575f80fd5b506105e360048036038101906105de91906132b2565b61128c565b005b3480156105f0575f80fd5b506105f961133b565b6040516106069190612dbc565b60405180910390f35b34801561061a575f80fd5b5061063560048036038101906106309190612ebd565b61135f565b6040516106429190612ef7565b60405180910390f35b8261065581610e0f565b73ffffffffffffffffffffffffffffffffffffffff16610673611374565b73ffffffffffffffffffffffffffffffffffffffff16146106c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c09061333a565b60405180910390fd5b6106f760048585856040516020016106e393929190613358565b60405160208183030381529060405261137b565b5050505050565b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610770575061076f82611511565b5b9050919050565b6006602052815f5260405f20602052805f5260405f205f915091509054906101000a900460ff1681565b5f806107ab61157a565b9050805f015f8481526020019081526020015f2060010154915050919050565b6107d4826107a1565b6107dd816115a1565b6107e783836115b5565b50505050565b6107f5611374565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610859576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61086382826116ad565b505050565b6108706117a5565b6108798261188b565b61088382826118b9565b5050565b5f6108906119d7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f4260015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f856040516020016109099190612dbc565b6040516020818303038152906040528051906020012081526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541190509392505050565b6003602052805f5260405f205f915090505481565b5f610990611a5e565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff161480156109d85750825b90505f60018367ffffffffffffffff16148015610a0b57505f3073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610a19575080155b15610a50576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610a9d576001855f0160086101000a81548160ff0219169083151502179055505b610aa5611a85565b610aad611a8f565b610ab95f801b8a6115b5565b50610ae47f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3896115b5565b505f5b87879050811015610b5157610b437fa5a0b70b385ff7611cd3840916bd08b10829e5bf9e6637cf79dd9a427fc0e2ab898984818110610b2957610b28613394565b5b9050602002016020810190610b3e9190612ebd565b6115b5565b508080600101915050610ae7565b508315610bac575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610ba39190613416565b60405180910390a15b505050505050505050565b6005602052805f5260405f205f91509050805f015f9054906101000a900460ff1690805f0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610c0d9061345c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c399061345c565b8015610c845780601f10610c5b57610100808354040283529160200191610c84565b820191905f5260205f20905b815481529060010190602001808311610c6757829003601f168201915b505050505090806002015490806003015f9054906101000a900460ff16905085565b83610cb081610e0f565b73ffffffffffffffffffffffffffffffffffffffff16610cce611374565b73ffffffffffffffffffffffffffffffffffffffff1614610d24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1b9061333a565b60405180910390fd5b610d54600386868686604051602001610d40949392919061348c565b60405160208183030381529060405261137b565b505050505050565b82610d6681610e0f565b73ffffffffffffffffffffffffffffffffffffffff16610d84611374565b73ffffffffffffffffffffffffffffffffffffffff1614610dda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd19061333a565b60405180910390fd5b610e086002858585604051602001610df4939291906134d6565b60405160208183030381529060405261137b565b5050505050565b5f805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ea85780610eaa565b825b915050919050565b5f80610ebc61157a565b9050805f015f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1691505092915050565b5f801b81565b83610f3381610e0f565b73ffffffffffffffffffffffffffffffffffffffff16610f51611374565b73ffffffffffffffffffffffffffffffffffffffff1614610fa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9e9061333a565b60405180910390fd5b610fd7600186868686604051602001610fc3949392919061350b565b60405160208183030381529060405261137b565b505050505050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b7fa5a0b70b385ff7611cd3840916bd08b10829e5bf9e6637cf79dd9a427fc0e2ab611042816115a1565b5f60055f8481526020019081526020015f209050806003015f9054906101000a900460ff16156110a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109e90613598565b60405180910390fd5b60065f8481526020019081526020015f205f6110c1611374565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113e90613600565b60405180910390fd5b600160065f8581526020019081526020015f205f611163611374565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806002015f8154809291906111c69061364b565b91905055506111d3611374565b73ffffffffffffffffffffffffffffffffffffffff16837fbd5edb0e5ebba23b8f340c60c454d0c9d03c0feef395ea9dbfb4b1bc8cce7e6e836002015460405161121d9190612ef7565b60405180910390a3600281600201541061123b5761123a83611a99565b5b505050565b611249826107a1565b611252816115a1565b61125c83836116ad565b50505050565b7fa5a0b70b385ff7611cd3840916bd08b10829e5bf9e6637cf79dd9a427fc0e2ab81565b60045481565b8161129681610e0f565b73ffffffffffffffffffffffffffffffffffffffff166112b4611374565b73ffffffffffffffffffffffffffffffffffffffff161461130a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113019061333a565b60405180910390fd5b6113355f8484604051602001611321929190613692565b60405160208183030381529060405261137b565b50505050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b6002602052805f5260405f205f915090505481565b5f33905090565b5f8060045f815461138b9061364b565b91905081905590506040518060a001604052808560048111156113b1576113b0613009565b5b81526020016113be611374565b73ffffffffffffffffffffffffffffffffffffffff1681526020018481526020015f81526020015f151581525060055f8381526020019081526020015f205f820151815f015f6101000a81548160ff0219169083600481111561142457611423613009565b5b02179055506020820151815f0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001019081611484919061384d565b50606082015181600201556080820151816003015f6101000a81548160ff0219169083151502179055509050506114b9611374565b73ffffffffffffffffffffffffffffffffffffffff16817f6b75dbcdd90efaba9acffddd7c21135f9405289728c32ab618511a96826ec73b866040516114ff919061391c565b60405180910390a38091505092915050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800905090565b6115b2816115ad611374565b612017565b50565b5f806115bf61157a565b90506115cb8484610eb2565b6116a2576001815f015f8681526020019081526020015f205f015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555061163e611374565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506116a7565b5f9150505b92915050565b5f806116b761157a565b90506116c38484610eb2565b1561179a575f815f015f8681526020019081526020015f205f015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611736611374565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a4600191505061179f565b5f9150505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061185257507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611839612068565b73ffffffffffffffffffffffffffffffffffffffff1614155b15611889576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36118b5816115a1565b5050565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561192157506040513d601f19601f8201168201806040525081019061191e9190613949565b60015b61196257816040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815260040161195991906131c3565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b81146119c857806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016119bf9190612dbc565b60405180910390fd5b6119d283836120bb565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611a5c576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b611a8d61212d565b565b611a9761212d565b565b5f60055f8381526020019081526020015f209050806003015f9054906101000a900460ff1615611afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af590613598565b60405180910390fd5b6001816003015f6101000a81548160ff0219169083151502179055505f6004811115611b2d57611b2c613009565b5b815f015f9054906101000a900460ff166004811115611b4f57611b4e613009565b5b03611c09575f80826001018054611b659061345c565b80601f0160208091040260200160405190810160405280929190818152602001828054611b919061345c565b8015611bdc5780601f10611bb357610100808354040283529160200191611bdc565b820191905f5260205f20905b815481529060010190602001808311611bbf57829003601f168201915b5050505050806020019051810190611bf491906139af565b91509150611c02828261216d565b5050611fe6565b60016004811115611c1d57611c1c613009565b5b815f015f9054906101000a900460ff166004811115611c3f57611c3e613009565b5b03611d03575f805f80846001018054611c579061345c565b80601f0160208091040260200160405190810160405280929190818152602001828054611c839061345c565b8015611cce5780601f10611ca557610100808354040283529160200191611cce565b820191905f5260205f20905b815481529060010190602001808311611cb157829003601f168201915b5050505050806020019051810190611ce69190613a01565b9350935093509350611cfa848484846122ba565b50505050611fe5565b60026004811115611d1757611d16613009565b5b815f015f9054906101000a900460ff166004811115611d3957611d38613009565b5b03611df8575f805f836001018054611d509061345c565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7c9061345c565b8015611dc75780601f10611d9e57610100808354040283529160200191611dc7565b820191905f5260205f20905b815481529060010190602001808311611daa57829003601f168201915b5050505050806020019051810190611ddf9190613a65565b925092509250611df0838383612455565b505050611fe4565b60036004811115611e0c57611e0b613009565b5b815f015f9054906101000a900460ff166004811115611e2e57611e2d613009565b5b03611ef2575f805f80846001018054611e469061345c565b80601f0160208091040260200160405190810160405280929190818152602001828054611e729061345c565b8015611ebd5780601f10611e9457610100808354040283529160200191611ebd565b820191905f5260205f20905b815481529060010190602001808311611ea057829003601f168201915b5050505050806020019051810190611ed59190613b23565b9350935093509350611ee9848484846125df565b50505050611fe3565b600480811115611f0557611f04613009565b5b815f015f9054906101000a900460ff166004811115611f2757611f26613009565b5b03611fe2575f805f836001018054611f3e9061345c565b80601f0160208091040260200160405190810160405280929190818152602001828054611f6a9061345c565b8015611fb55780601f10611f8c57610100808354040283529160200191611fb5565b820191905f5260205f20905b815481529060010190602001808311611f9857829003601f168201915b5050505050806020019051810190611fcd9190613ba3565b925092509250611fde8383836126c3565b5050505b5b5b5b5b817f02a26fa44256b4b2305486727e5f378dd9075c942027a96d7c0f16b883b6ea4c60405160405180910390a25050565b6120218282610eb2565b6120645780826040517fe2517d3f00000000000000000000000000000000000000000000000000000000815260040161205b929190613c0f565b60405180910390fd5b5050565b5f6120947f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b61279b565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6120c4826127a4565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f815111156121205761211a828261286d565b50612129565b6121286128ed565b5b5050565b612135612929565b61216b576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b8173ffffffffffffffffffffffffffffffffffffffff167f38a5a6e68f30ed1ab45860a4afb34bcb2fc00f22ca462d249b8a8d40cda6f7a38260025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546040516121f2929190613c36565b60405180910390a2805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504360025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505050565b5f81426122c79190613c5d565b90508060015f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f866040516020016123199190612dbc565b6040516020818303038152906040528051906020012081526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508473ffffffffffffffffffffffffffffffffffffffff167f5a5084339536bcab65f20799fcc58724588145ca054bd2be626174b27ba156f785858460025f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546040516124049493929190613c90565b60405180910390a24360025f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505050505050565b4260015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f846040516020016124a59190612dbc565b6040516020818303038152906040528051906020012081526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff167f5a5084339536bcab65f20799fcc58724588145ca054bd2be626174b27ba156f783834260025f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546040516125909493929190613c90565b60405180910390a24360025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505050565b8373ffffffffffffffffffffffffffffffffffffffff167f18ab6b2ae3d64306c00ce663125f2bd680e441a098de1635bd7ad8b0d44965e4848484426126259190613c5d565b60025f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546040516126739493929190613cd3565b60405180910390a24360025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555050505050565b8273ffffffffffffffffffffffffffffffffffffffff167f18ab6b2ae3d64306c00ce663125f2bd680e441a098de1635bd7ad8b0d44965e483835f60025f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205460405161274c9493929190613d56565b60405180910390a24360025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505050565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b036127ff57806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016127f691906131c3565b60405180910390fd5b8061282b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b61279b565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff16846040516128969190613dda565b5f60405180830381855af49150503d805f81146128ce576040519150601f19603f3d011682016040523d82523d5f602084013e6128d3565b606091505b50915091506128e3858383612947565b9250505092915050565b5f341115612927576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f612932611a5e565b5f0160089054906101000a900460ff16905090565b60608261295c57612957826129d4565b6129cc565b5f825114801561298257505f8473ffffffffffffffffffffffffffffffffffffffff163b145b156129c457836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016129bb91906131c3565b60405180910390fd5b8190506129cd565b5b9392505050565b5f815111156129e65780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612a5282612a29565b9050919050565b612a6281612a48565b8114612a6c575f80fd5b50565b5f81359050612a7d81612a59565b92915050565b5f819050919050565b612a9581612a83565b8114612a9f575f80fd5b50565b5f81359050612ab081612a8c565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612b0482612abe565b810181811067ffffffffffffffff82111715612b2357612b22612ace565b5b80604052505050565b5f612b35612a18565b9050612b418282612afb565b919050565b5f67ffffffffffffffff821115612b6057612b5f612ace565b5b612b6982612abe565b9050602081019050919050565b828183375f83830152505050565b5f612b96612b9184612b46565b612b2c565b905082815260208101848484011115612bb257612bb1612aba565b5b612bbd848285612b76565b509392505050565b5f82601f830112612bd957612bd8612ab6565b5b8135612be9848260208601612b84565b91505092915050565b5f805f60608486031215612c0957612c08612a21565b5b5f612c1686828701612a6f565b9350506020612c2786828701612aa2565b925050604084013567ffffffffffffffff811115612c4857612c47612a25565b5b612c5486828701612bc5565b9150509250925092565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612c9281612c5e565b8114612c9c575f80fd5b50565b5f81359050612cad81612c89565b92915050565b5f60208284031215612cc857612cc7612a21565b5b5f612cd584828501612c9f565b91505092915050565b5f8115159050919050565b612cf281612cde565b82525050565b5f602082019050612d0b5f830184612ce9565b92915050565b5f819050919050565b612d2381612d11565b8114612d2d575f80fd5b50565b5f81359050612d3e81612d1a565b92915050565b5f8060408385031215612d5a57612d59612a21565b5b5f612d6785828601612d30565b9250506020612d7885828601612a6f565b9150509250929050565b5f60208284031215612d9757612d96612a21565b5b5f612da484828501612aa2565b91505092915050565b612db681612a83565b82525050565b5f602082019050612dcf5f830184612dad565b92915050565b5f8060408385031215612deb57612dea612a21565b5b5f612df885828601612aa2565b9250506020612e0985828601612a6f565b9150509250929050565b5f8060408385031215612e2957612e28612a21565b5b5f612e3685828601612a6f565b925050602083013567ffffffffffffffff811115612e5757612e56612a25565b5b612e6385828601612bc5565b9150509250929050565b5f805f60608486031215612e8457612e83612a21565b5b5f612e9186828701612a6f565b9350506020612ea286828701612aa2565b9250506040612eb386828701612a6f565b9150509250925092565b5f60208284031215612ed257612ed1612a21565b5b5f612edf84828501612a6f565b91505092915050565b612ef181612d11565b82525050565b5f602082019050612f0a5f830184612ee8565b92915050565b5f80fd5b5f80fd5b5f8083601f840112612f2d57612f2c612ab6565b5b8235905067ffffffffffffffff811115612f4a57612f49612f10565b5b602083019150836020820283011115612f6657612f65612f14565b5b9250929050565b5f805f8060608587031215612f8557612f84612a21565b5b5f612f9287828801612a6f565b9450506020612fa387828801612a6f565b935050604085013567ffffffffffffffff811115612fc457612fc3612a25565b5b612fd087828801612f18565b925092505092959194509250565b5f60208284031215612ff357612ff2612a21565b5b5f61300084828501612d30565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6005811061304757613046613009565b5b50565b5f81905061305782613036565b919050565b5f6130668261304a565b9050919050565b6130768161305c565b82525050565b61308581612a48565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6130bd8261308b565b6130c78185613095565b93506130d78185602086016130a5565b6130e081612abe565b840191505092915050565b5f60a0820190506130fe5f83018861306d565b61310b602083018761307c565b818103604083015261311d81866130b3565b905061312c6060830185612ee8565b6131396080830184612ce9565b9695505050505050565b5f805f806080858703121561315b5761315a612a21565b5b5f61316887828801612a6f565b945050602061317987828801612aa2565b935050604085013567ffffffffffffffff81111561319a57613199612a25565b5b6131a687828801612bc5565b92505060606131b787828801612d30565b91505092959194509250565b5f6020820190506131d65f83018461307c565b92915050565b5f805f80608085870312156131f4576131f3612a21565b5b5f61320187828801612a6f565b945050602061321287828801612aa2565b935050604061322387828801612a6f565b925050606061323487828801612d30565b91505092959194509250565b5f81519050919050565b5f82825260208201905092915050565b5f61326482613240565b61326e818561324a565b935061327e8185602086016130a5565b61328781612abe565b840191505092915050565b5f6020820190508181035f8301526132aa818461325a565b905092915050565b5f80604083850312156132c8576132c7612a21565b5b5f6132d585828601612a6f565b92505060206132e685828601612a6f565b9150509250929050565b7f6261645f6163746f7200000000000000000000000000000000000000000000005f82015250565b5f61332460098361324a565b915061332f826132f0565b602082019050919050565b5f6020820190508181035f83015261335181613318565b9050919050565b5f60608201905061336b5f83018661307c565b6133786020830185612dad565b818103604083015261338a81846130b3565b9050949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f819050919050565b5f6134006133fb6133f6846133c1565b6133dd565b6133ca565b9050919050565b613410816133e6565b82525050565b5f6020820190506134295f830184613407565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061347357607f821691505b6020821081036134865761348561342f565b5b50919050565b5f60808201905061349f5f83018761307c565b6134ac6020830186612dad565b81810360408301526134be81856130b3565b90506134cd6060830184612ee8565b95945050505050565b5f6060820190506134e95f83018661307c565b6134f66020830185612dad565b613503604083018461307c565b949350505050565b5f60808201905061351e5f83018761307c565b61352b6020830186612dad565b613538604083018561307c565b6135456060830184612ee8565b95945050505050565b7f616c72656164795f6578656375746564000000000000000000000000000000005f82015250565b5f61358260108361324a565b915061358d8261354e565b602082019050919050565b5f6020820190508181035f8301526135af81613576565b9050919050565b7f616c72656164795f617070726f766564000000000000000000000000000000005f82015250565b5f6135ea60108361324a565b91506135f5826135b6565b602082019050919050565b5f6020820190508181035f830152613617816135de565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61365582612d11565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036136875761368661361e565b5b600182019050919050565b5f6040820190506136a55f83018561307c565b6136b2602083018461307c565b9392505050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026137157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826136da565b61371f86836136da565b95508019841693508086168417925050509392505050565b5f61375161374c61374784612d11565b6133dd565b612d11565b9050919050565b5f819050919050565b61376a83613737565b61377e61377682613758565b8484546136e6565b825550505050565b5f90565b613792613786565b61379d818484613761565b505050565b5b818110156137c0576137b55f8261378a565b6001810190506137a3565b5050565b601f821115613805576137d6816136b9565b6137df846136cb565b810160208510156137ee578190505b6138026137fa856136cb565b8301826137a2565b50505b505050565b5f82821c905092915050565b5f6138255f198460080261380a565b1980831691505092915050565b5f61383d8383613816565b9150826002028217905092915050565b6138568261308b565b67ffffffffffffffff81111561386f5761386e612ace565b5b613879825461345c565b6138848282856137c4565b5f60209050601f8311600181146138b5575f84156138a3578287015190505b6138ad8582613832565b865550613914565b601f1984166138c3866136b9565b5f5b828110156138ea578489015182556001820191506020850194506020810190506138c5565b868310156139075784890151613903601f891682613816565b8355505b6001600288020188555050505b505050505050565b5f60208201905061392f5f83018461306d565b92915050565b5f8151905061394381612a8c565b92915050565b5f6020828403121561395e5761395d612a21565b5b5f61396b84828501613935565b91505092915050565b5f61397e82612a29565b9050919050565b61398e81613974565b8114613998575f80fd5b50565b5f815190506139a981613985565b92915050565b5f80604083850312156139c5576139c4612a21565b5b5f6139d28582860161399b565b92505060206139e38582860161399b565b9150509250929050565b5f815190506139fb81612d1a565b92915050565b5f805f8060808587031215613a1957613a18612a21565b5b5f613a268782880161399b565b9450506020613a3787828801613935565b9350506040613a488782880161399b565b9250506060613a59878288016139ed565b91505092959194509250565b5f805f60608486031215613a7c57613a7b612a21565b5b5f613a898682870161399b565b9350506020613a9a86828701613935565b9250506040613aab8682870161399b565b9150509250925092565b5f613ac7613ac284612b46565b612b2c565b905082815260208101848484011115613ae357613ae2612aba565b5b613aee8482856130a5565b509392505050565b5f82601f830112613b0a57613b09612ab6565b5b8151613b1a848260208601613ab5565b91505092915050565b5f805f8060808587031215613b3b57613b3a612a21565b5b5f613b488782880161399b565b9450506020613b5987828801613935565b935050604085015167ffffffffffffffff811115613b7a57613b79612a25565b5b613b8687828801613af6565b9250506060613b97878288016139ed565b91505092959194509250565b5f805f60608486031215613bba57613bb9612a21565b5b5f613bc78682870161399b565b9350506020613bd886828701613935565b925050604084015167ffffffffffffffff811115613bf957613bf8612a25565b5b613c0586828701613af6565b9150509250925092565b5f604082019050613c225f83018561307c565b613c2f6020830184612dad565b9392505050565b5f604082019050613c495f83018561307c565b613c566020830184612ee8565b9392505050565b5f613c6782612d11565b9150613c7283612d11565b9250828201905080821115613c8a57613c8961361e565b5b92915050565b5f608082019050613ca35f830187612dad565b613cb0602083018661307c565b613cbd6040830185612ee8565b613cca6060830184612ee8565b95945050505050565b5f608082019050613ce65f830187612dad565b8181036020830152613cf881866130b3565b9050613d076040830185612ee8565b613d146060830184612ee8565b95945050505050565b5f819050919050565b5f613d40613d3b613d3684613d1d565b6133dd565b612d11565b9050919050565b613d5081613d26565b82525050565b5f608082019050613d695f830187612dad565b8181036020830152613d7b81866130b3565b9050613d8a6040830185613d47565b613d976060830184612ee8565b95945050505050565b5f81905092915050565b5f613db48261308b565b613dbe8185613da0565b9350613dce8185602086016130a5565b80840191505092915050565b5f613de58284613daa565b91508190509291505056fea2646970667358221220d0259f7faffc160d9deda5265b86e1c42d31647a21884d9e103768d0a1447ac264736f6c634300081a0033",
}

// DidOptimizeABI is the input ABI used to generate the binding from.
// Deprecated: Use DidOptimizeMetaData.ABI instead.
var DidOptimizeABI = DidOptimizeMetaData.ABI

// DidOptimizeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DidOptimizeMetaData.Bin instead.
var DidOptimizeBin = DidOptimizeMetaData.Bin

// DeployDidOptimize deploys a new Ethereum contract, binding an instance of DidOptimize to it.
func DeployDidOptimize(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DidOptimize, error) {
	parsed, err := DidOptimizeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DidOptimizeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DidOptimize{DidOptimizeCaller: DidOptimizeCaller{contract: contract}, DidOptimizeTransactor: DidOptimizeTransactor{contract: contract}, DidOptimizeFilterer: DidOptimizeFilterer{contract: contract}}, nil
}

// DidOptimize is an auto generated Go binding around an Ethereum contract.
type DidOptimize struct {
	DidOptimizeCaller     // Read-only binding to the contract
	DidOptimizeTransactor // Write-only binding to the contract
	DidOptimizeFilterer   // Log filterer for contract events
}

// DidOptimizeCaller is an auto generated read-only Go binding around an Ethereum contract.
type DidOptimizeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DidOptimizeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DidOptimizeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DidOptimizeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DidOptimizeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DidOptimizeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DidOptimizeSession struct {
	Contract     *DidOptimize      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DidOptimizeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DidOptimizeCallerSession struct {
	Contract *DidOptimizeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// DidOptimizeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DidOptimizeTransactorSession struct {
	Contract     *DidOptimizeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// DidOptimizeRaw is an auto generated low-level Go binding around an Ethereum contract.
type DidOptimizeRaw struct {
	Contract *DidOptimize // Generic contract binding to access the raw methods on
}

// DidOptimizeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DidOptimizeCallerRaw struct {
	Contract *DidOptimizeCaller // Generic read-only contract binding to access the raw methods on
}

// DidOptimizeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DidOptimizeTransactorRaw struct {
	Contract *DidOptimizeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDidOptimize creates a new instance of DidOptimize, bound to a specific deployed contract.
func NewDidOptimize(address common.Address, backend bind.ContractBackend) (*DidOptimize, error) {
	contract, err := bindDidOptimize(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DidOptimize{DidOptimizeCaller: DidOptimizeCaller{contract: contract}, DidOptimizeTransactor: DidOptimizeTransactor{contract: contract}, DidOptimizeFilterer: DidOptimizeFilterer{contract: contract}}, nil
}

// NewDidOptimizeCaller creates a new read-only instance of DidOptimize, bound to a specific deployed contract.
func NewDidOptimizeCaller(address common.Address, caller bind.ContractCaller) (*DidOptimizeCaller, error) {
	contract, err := bindDidOptimize(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DidOptimizeCaller{contract: contract}, nil
}

// NewDidOptimizeTransactor creates a new write-only instance of DidOptimize, bound to a specific deployed contract.
func NewDidOptimizeTransactor(address common.Address, transactor bind.ContractTransactor) (*DidOptimizeTransactor, error) {
	contract, err := bindDidOptimize(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DidOptimizeTransactor{contract: contract}, nil
}

// NewDidOptimizeFilterer creates a new log filterer instance of DidOptimize, bound to a specific deployed contract.
func NewDidOptimizeFilterer(address common.Address, filterer bind.ContractFilterer) (*DidOptimizeFilterer, error) {
	contract, err := bindDidOptimize(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DidOptimizeFilterer{contract: contract}, nil
}

// bindDidOptimize binds a generic wrapper to an already deployed contract.
func bindDidOptimize(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DidOptimizeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DidOptimize *DidOptimizeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DidOptimize.Contract.DidOptimizeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DidOptimize *DidOptimizeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DidOptimize.Contract.DidOptimizeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DidOptimize *DidOptimizeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DidOptimize.Contract.DidOptimizeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DidOptimize *DidOptimizeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DidOptimize.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DidOptimize *DidOptimizeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DidOptimize.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DidOptimize *DidOptimizeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DidOptimize.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DidOptimize *DidOptimizeCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DidOptimize *DidOptimizeSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _DidOptimize.Contract.DEFAULTADMINROLE(&_DidOptimize.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DidOptimize *DidOptimizeCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _DidOptimize.Contract.DEFAULTADMINROLE(&_DidOptimize.CallOpts)
}

// MULTISIGROLE is a free data retrieval call binding the contract method 0xe328400c.
//
// Solidity: function MULTISIG_ROLE() view returns(bytes32)
func (_DidOptimize *DidOptimizeCaller) MULTISIGROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "MULTISIG_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MULTISIGROLE is a free data retrieval call binding the contract method 0xe328400c.
//
// Solidity: function MULTISIG_ROLE() view returns(bytes32)
func (_DidOptimize *DidOptimizeSession) MULTISIGROLE() ([32]byte, error) {
	return _DidOptimize.Contract.MULTISIGROLE(&_DidOptimize.CallOpts)
}

// MULTISIGROLE is a free data retrieval call binding the contract method 0xe328400c.
//
// Solidity: function MULTISIG_ROLE() view returns(bytes32)
func (_DidOptimize *DidOptimizeCallerSession) MULTISIGROLE() ([32]byte, error) {
	return _DidOptimize.Contract.MULTISIGROLE(&_DidOptimize.CallOpts)
}

// UPGRADERROLE is a free data retrieval call binding the contract method 0xf72c0d8b.
//
// Solidity: function UPGRADER_ROLE() view returns(bytes32)
func (_DidOptimize *DidOptimizeCaller) UPGRADERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "UPGRADER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UPGRADERROLE is a free data retrieval call binding the contract method 0xf72c0d8b.
//
// Solidity: function UPGRADER_ROLE() view returns(bytes32)
func (_DidOptimize *DidOptimizeSession) UPGRADERROLE() ([32]byte, error) {
	return _DidOptimize.Contract.UPGRADERROLE(&_DidOptimize.CallOpts)
}

// UPGRADERROLE is a free data retrieval call binding the contract method 0xf72c0d8b.
//
// Solidity: function UPGRADER_ROLE() view returns(bytes32)
func (_DidOptimize *DidOptimizeCallerSession) UPGRADERROLE() ([32]byte, error) {
	return _DidOptimize.Contract.UPGRADERROLE(&_DidOptimize.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_DidOptimize *DidOptimizeCaller) UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "UPGRADE_INTERFACE_VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_DidOptimize *DidOptimizeSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _DidOptimize.Contract.UPGRADEINTERFACEVERSION(&_DidOptimize.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_DidOptimize *DidOptimizeCallerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _DidOptimize.Contract.UPGRADEINTERFACEVERSION(&_DidOptimize.CallOpts)
}

// Changed is a free data retrieval call binding the contract method 0xf96d0f9f.
//
// Solidity: function changed(address ) view returns(uint256)
func (_DidOptimize *DidOptimizeCaller) Changed(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "changed", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Changed is a free data retrieval call binding the contract method 0xf96d0f9f.
//
// Solidity: function changed(address ) view returns(uint256)
func (_DidOptimize *DidOptimizeSession) Changed(arg0 common.Address) (*big.Int, error) {
	return _DidOptimize.Contract.Changed(&_DidOptimize.CallOpts, arg0)
}

// Changed is a free data retrieval call binding the contract method 0xf96d0f9f.
//
// Solidity: function changed(address ) view returns(uint256)
func (_DidOptimize *DidOptimizeCallerSession) Changed(arg0 common.Address) (*big.Int, error) {
	return _DidOptimize.Contract.Changed(&_DidOptimize.CallOpts, arg0)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DidOptimize *DidOptimizeCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DidOptimize *DidOptimizeSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _DidOptimize.Contract.GetRoleAdmin(&_DidOptimize.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DidOptimize *DidOptimizeCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _DidOptimize.Contract.GetRoleAdmin(&_DidOptimize.CallOpts, role)
}

// HasApproved is a free data retrieval call binding the contract method 0x2358d5a8.
//
// Solidity: function hasApproved(uint256 , address ) view returns(bool)
func (_DidOptimize *DidOptimizeCaller) HasApproved(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "hasApproved", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasApproved is a free data retrieval call binding the contract method 0x2358d5a8.
//
// Solidity: function hasApproved(uint256 , address ) view returns(bool)
func (_DidOptimize *DidOptimizeSession) HasApproved(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _DidOptimize.Contract.HasApproved(&_DidOptimize.CallOpts, arg0, arg1)
}

// HasApproved is a free data retrieval call binding the contract method 0x2358d5a8.
//
// Solidity: function hasApproved(uint256 , address ) view returns(bool)
func (_DidOptimize *DidOptimizeCallerSession) HasApproved(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _DidOptimize.Contract.HasApproved(&_DidOptimize.CallOpts, arg0, arg1)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DidOptimize *DidOptimizeCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DidOptimize *DidOptimizeSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _DidOptimize.Contract.HasRole(&_DidOptimize.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DidOptimize *DidOptimizeCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _DidOptimize.Contract.HasRole(&_DidOptimize.CallOpts, role, account)
}

// IdentityOwner is a free data retrieval call binding the contract method 0x8733d4e8.
//
// Solidity: function identityOwner(address identity) view returns(address)
func (_DidOptimize *DidOptimizeCaller) IdentityOwner(opts *bind.CallOpts, identity common.Address) (common.Address, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "identityOwner", identity)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IdentityOwner is a free data retrieval call binding the contract method 0x8733d4e8.
//
// Solidity: function identityOwner(address identity) view returns(address)
func (_DidOptimize *DidOptimizeSession) IdentityOwner(identity common.Address) (common.Address, error) {
	return _DidOptimize.Contract.IdentityOwner(&_DidOptimize.CallOpts, identity)
}

// IdentityOwner is a free data retrieval call binding the contract method 0x8733d4e8.
//
// Solidity: function identityOwner(address identity) view returns(address)
func (_DidOptimize *DidOptimizeCallerSession) IdentityOwner(identity common.Address) (common.Address, error) {
	return _DidOptimize.Contract.IdentityOwner(&_DidOptimize.CallOpts, identity)
}

// Nonce is a free data retrieval call binding the contract method 0x70ae92d2.
//
// Solidity: function nonce(address ) view returns(uint256)
func (_DidOptimize *DidOptimizeCaller) Nonce(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "nonce", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0x70ae92d2.
//
// Solidity: function nonce(address ) view returns(uint256)
func (_DidOptimize *DidOptimizeSession) Nonce(arg0 common.Address) (*big.Int, error) {
	return _DidOptimize.Contract.Nonce(&_DidOptimize.CallOpts, arg0)
}

// Nonce is a free data retrieval call binding the contract method 0x70ae92d2.
//
// Solidity: function nonce(address ) view returns(uint256)
func (_DidOptimize *DidOptimizeCallerSession) Nonce(arg0 common.Address) (*big.Int, error) {
	return _DidOptimize.Contract.Nonce(&_DidOptimize.CallOpts, arg0)
}

// PendingCount is a free data retrieval call binding the contract method 0xea70b4af.
//
// Solidity: function pendingCount() view returns(uint256)
func (_DidOptimize *DidOptimizeCaller) PendingCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "pendingCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PendingCount is a free data retrieval call binding the contract method 0xea70b4af.
//
// Solidity: function pendingCount() view returns(uint256)
func (_DidOptimize *DidOptimizeSession) PendingCount() (*big.Int, error) {
	return _DidOptimize.Contract.PendingCount(&_DidOptimize.CallOpts)
}

// PendingCount is a free data retrieval call binding the contract method 0xea70b4af.
//
// Solidity: function pendingCount() view returns(uint256)
func (_DidOptimize *DidOptimizeCallerSession) PendingCount() (*big.Int, error) {
	return _DidOptimize.Contract.PendingCount(&_DidOptimize.CallOpts)
}

// Pendings is a free data retrieval call binding the contract method 0x7965df39.
//
// Solidity: function pendings(uint256 ) view returns(uint8 action, address initiator, bytes data, uint256 approvals, bool executed)
func (_DidOptimize *DidOptimizeCaller) Pendings(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Action    uint8
	Initiator common.Address
	Data      []byte
	Approvals *big.Int
	Executed  bool
}, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "pendings", arg0)

	outstruct := new(struct {
		Action    uint8
		Initiator common.Address
		Data      []byte
		Approvals *big.Int
		Executed  bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Action = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Initiator = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Data = *abi.ConvertType(out[2], new([]byte)).(*[]byte)
	outstruct.Approvals = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Executed = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// Pendings is a free data retrieval call binding the contract method 0x7965df39.
//
// Solidity: function pendings(uint256 ) view returns(uint8 action, address initiator, bytes data, uint256 approvals, bool executed)
func (_DidOptimize *DidOptimizeSession) Pendings(arg0 *big.Int) (struct {
	Action    uint8
	Initiator common.Address
	Data      []byte
	Approvals *big.Int
	Executed  bool
}, error) {
	return _DidOptimize.Contract.Pendings(&_DidOptimize.CallOpts, arg0)
}

// Pendings is a free data retrieval call binding the contract method 0x7965df39.
//
// Solidity: function pendings(uint256 ) view returns(uint8 action, address initiator, bytes data, uint256 approvals, bool executed)
func (_DidOptimize *DidOptimizeCallerSession) Pendings(arg0 *big.Int) (struct {
	Action    uint8
	Initiator common.Address
	Data      []byte
	Approvals *big.Int
	Executed  bool
}, error) {
	return _DidOptimize.Contract.Pendings(&_DidOptimize.CallOpts, arg0)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_DidOptimize *DidOptimizeCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_DidOptimize *DidOptimizeSession) ProxiableUUID() ([32]byte, error) {
	return _DidOptimize.Contract.ProxiableUUID(&_DidOptimize.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_DidOptimize *DidOptimizeCallerSession) ProxiableUUID() ([32]byte, error) {
	return _DidOptimize.Contract.ProxiableUUID(&_DidOptimize.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DidOptimize *DidOptimizeCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DidOptimize *DidOptimizeSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DidOptimize.Contract.SupportsInterface(&_DidOptimize.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DidOptimize *DidOptimizeCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DidOptimize.Contract.SupportsInterface(&_DidOptimize.CallOpts, interfaceId)
}

// ValidDelegate is a free data retrieval call binding the contract method 0x622b2a3c.
//
// Solidity: function validDelegate(address identity, bytes32 delegateType, address delegate) view returns(bool)
func (_DidOptimize *DidOptimizeCaller) ValidDelegate(opts *bind.CallOpts, identity common.Address, delegateType [32]byte, delegate common.Address) (bool, error) {
	var out []interface{}
	err := _DidOptimize.contract.Call(opts, &out, "validDelegate", identity, delegateType, delegate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidDelegate is a free data retrieval call binding the contract method 0x622b2a3c.
//
// Solidity: function validDelegate(address identity, bytes32 delegateType, address delegate) view returns(bool)
func (_DidOptimize *DidOptimizeSession) ValidDelegate(identity common.Address, delegateType [32]byte, delegate common.Address) (bool, error) {
	return _DidOptimize.Contract.ValidDelegate(&_DidOptimize.CallOpts, identity, delegateType, delegate)
}

// ValidDelegate is a free data retrieval call binding the contract method 0x622b2a3c.
//
// Solidity: function validDelegate(address identity, bytes32 delegateType, address delegate) view returns(bool)
func (_DidOptimize *DidOptimizeCallerSession) ValidDelegate(identity common.Address, delegateType [32]byte, delegate common.Address) (bool, error) {
	return _DidOptimize.Contract.ValidDelegate(&_DidOptimize.CallOpts, identity, delegateType, delegate)
}

// AddDelegate is a paid mutator transaction binding the contract method 0xa7068d66.
//
// Solidity: function addDelegate(address identity, bytes32 dt, address delegate, uint256 validity) returns()
func (_DidOptimize *DidOptimizeTransactor) AddDelegate(opts *bind.TransactOpts, identity common.Address, dt [32]byte, delegate common.Address, validity *big.Int) (*types.Transaction, error) {
	return _DidOptimize.contract.Transact(opts, "addDelegate", identity, dt, delegate, validity)
}

// AddDelegate is a paid mutator transaction binding the contract method 0xa7068d66.
//
// Solidity: function addDelegate(address identity, bytes32 dt, address delegate, uint256 validity) returns()
func (_DidOptimize *DidOptimizeSession) AddDelegate(identity common.Address, dt [32]byte, delegate common.Address, validity *big.Int) (*types.Transaction, error) {
	return _DidOptimize.Contract.AddDelegate(&_DidOptimize.TransactOpts, identity, dt, delegate, validity)
}

// AddDelegate is a paid mutator transaction binding the contract method 0xa7068d66.
//
// Solidity: function addDelegate(address identity, bytes32 dt, address delegate, uint256 validity) returns()
func (_DidOptimize *DidOptimizeTransactorSession) AddDelegate(identity common.Address, dt [32]byte, delegate common.Address, validity *big.Int) (*types.Transaction, error) {
	return _DidOptimize.Contract.AddDelegate(&_DidOptimize.TransactOpts, identity, dt, delegate, validity)
}

// ApprovePending is a paid mutator transaction binding the contract method 0xd2270f12.
//
// Solidity: function approvePending(uint256 id) returns()
func (_DidOptimize *DidOptimizeTransactor) ApprovePending(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _DidOptimize.contract.Transact(opts, "approvePending", id)
}

// ApprovePending is a paid mutator transaction binding the contract method 0xd2270f12.
//
// Solidity: function approvePending(uint256 id) returns()
func (_DidOptimize *DidOptimizeSession) ApprovePending(id *big.Int) (*types.Transaction, error) {
	return _DidOptimize.Contract.ApprovePending(&_DidOptimize.TransactOpts, id)
}

// ApprovePending is a paid mutator transaction binding the contract method 0xd2270f12.
//
// Solidity: function approvePending(uint256 id) returns()
func (_DidOptimize *DidOptimizeTransactorSession) ApprovePending(id *big.Int) (*types.Transaction, error) {
	return _DidOptimize.Contract.ApprovePending(&_DidOptimize.TransactOpts, id)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xf00d4b5d.
//
// Solidity: function changeOwner(address identity, address newOwner) returns()
func (_DidOptimize *DidOptimizeTransactor) ChangeOwner(opts *bind.TransactOpts, identity common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _DidOptimize.contract.Transact(opts, "changeOwner", identity, newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xf00d4b5d.
//
// Solidity: function changeOwner(address identity, address newOwner) returns()
func (_DidOptimize *DidOptimizeSession) ChangeOwner(identity common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _DidOptimize.Contract.ChangeOwner(&_DidOptimize.TransactOpts, identity, newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xf00d4b5d.
//
// Solidity: function changeOwner(address identity, address newOwner) returns()
func (_DidOptimize *DidOptimizeTransactorSession) ChangeOwner(identity common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _DidOptimize.Contract.ChangeOwner(&_DidOptimize.TransactOpts, identity, newOwner)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DidOptimize *DidOptimizeTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DidOptimize.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DidOptimize *DidOptimizeSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DidOptimize.Contract.GrantRole(&_DidOptimize.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DidOptimize *DidOptimizeTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DidOptimize.Contract.GrantRole(&_DidOptimize.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address admin, address upgrader, address[] multisigs) returns()
func (_DidOptimize *DidOptimizeTransactor) Initialize(opts *bind.TransactOpts, admin common.Address, upgrader common.Address, multisigs []common.Address) (*types.Transaction, error) {
	return _DidOptimize.contract.Transact(opts, "initialize", admin, upgrader, multisigs)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address admin, address upgrader, address[] multisigs) returns()
func (_DidOptimize *DidOptimizeSession) Initialize(admin common.Address, upgrader common.Address, multisigs []common.Address) (*types.Transaction, error) {
	return _DidOptimize.Contract.Initialize(&_DidOptimize.TransactOpts, admin, upgrader, multisigs)
}

// Initialize is a paid mutator transaction binding the contract method 0x77a24f36.
//
// Solidity: function initialize(address admin, address upgrader, address[] multisigs) returns()
func (_DidOptimize *DidOptimizeTransactorSession) Initialize(admin common.Address, upgrader common.Address, multisigs []common.Address) (*types.Transaction, error) {
	return _DidOptimize.Contract.Initialize(&_DidOptimize.TransactOpts, admin, upgrader, multisigs)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_DidOptimize *DidOptimizeTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _DidOptimize.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_DidOptimize *DidOptimizeSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _DidOptimize.Contract.RenounceRole(&_DidOptimize.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_DidOptimize *DidOptimizeTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _DidOptimize.Contract.RenounceRole(&_DidOptimize.TransactOpts, role, callerConfirmation)
}

// RevokeAttribute is a paid mutator transaction binding the contract method 0x00c023da.
//
// Solidity: function revokeAttribute(address identity, bytes32 name, bytes value) returns()
func (_DidOptimize *DidOptimizeTransactor) RevokeAttribute(opts *bind.TransactOpts, identity common.Address, name [32]byte, value []byte) (*types.Transaction, error) {
	return _DidOptimize.contract.Transact(opts, "revokeAttribute", identity, name, value)
}

// RevokeAttribute is a paid mutator transaction binding the contract method 0x00c023da.
//
// Solidity: function revokeAttribute(address identity, bytes32 name, bytes value) returns()
func (_DidOptimize *DidOptimizeSession) RevokeAttribute(identity common.Address, name [32]byte, value []byte) (*types.Transaction, error) {
	return _DidOptimize.Contract.RevokeAttribute(&_DidOptimize.TransactOpts, identity, name, value)
}

// RevokeAttribute is a paid mutator transaction binding the contract method 0x00c023da.
//
// Solidity: function revokeAttribute(address identity, bytes32 name, bytes value) returns()
func (_DidOptimize *DidOptimizeTransactorSession) RevokeAttribute(identity common.Address, name [32]byte, value []byte) (*types.Transaction, error) {
	return _DidOptimize.Contract.RevokeAttribute(&_DidOptimize.TransactOpts, identity, name, value)
}

// RevokeDelegate is a paid mutator transaction binding the contract method 0x80b29f7c.
//
// Solidity: function revokeDelegate(address identity, bytes32 dt, address delegate) returns()
func (_DidOptimize *DidOptimizeTransactor) RevokeDelegate(opts *bind.TransactOpts, identity common.Address, dt [32]byte, delegate common.Address) (*types.Transaction, error) {
	return _DidOptimize.contract.Transact(opts, "revokeDelegate", identity, dt, delegate)
}

// RevokeDelegate is a paid mutator transaction binding the contract method 0x80b29f7c.
//
// Solidity: function revokeDelegate(address identity, bytes32 dt, address delegate) returns()
func (_DidOptimize *DidOptimizeSession) RevokeDelegate(identity common.Address, dt [32]byte, delegate common.Address) (*types.Transaction, error) {
	return _DidOptimize.Contract.RevokeDelegate(&_DidOptimize.TransactOpts, identity, dt, delegate)
}

// RevokeDelegate is a paid mutator transaction binding the contract method 0x80b29f7c.
//
// Solidity: function revokeDelegate(address identity, bytes32 dt, address delegate) returns()
func (_DidOptimize *DidOptimizeTransactorSession) RevokeDelegate(identity common.Address, dt [32]byte, delegate common.Address) (*types.Transaction, error) {
	return _DidOptimize.Contract.RevokeDelegate(&_DidOptimize.TransactOpts, identity, dt, delegate)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DidOptimize *DidOptimizeTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DidOptimize.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DidOptimize *DidOptimizeSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DidOptimize.Contract.RevokeRole(&_DidOptimize.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DidOptimize *DidOptimizeTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DidOptimize.Contract.RevokeRole(&_DidOptimize.TransactOpts, role, account)
}

// SetAttribute is a paid mutator transaction binding the contract method 0x7ad4b0a4.
//
// Solidity: function setAttribute(address identity, bytes32 name, bytes value, uint256 validity) returns()
func (_DidOptimize *DidOptimizeTransactor) SetAttribute(opts *bind.TransactOpts, identity common.Address, name [32]byte, value []byte, validity *big.Int) (*types.Transaction, error) {
	return _DidOptimize.contract.Transact(opts, "setAttribute", identity, name, value, validity)
}

// SetAttribute is a paid mutator transaction binding the contract method 0x7ad4b0a4.
//
// Solidity: function setAttribute(address identity, bytes32 name, bytes value, uint256 validity) returns()
func (_DidOptimize *DidOptimizeSession) SetAttribute(identity common.Address, name [32]byte, value []byte, validity *big.Int) (*types.Transaction, error) {
	return _DidOptimize.Contract.SetAttribute(&_DidOptimize.TransactOpts, identity, name, value, validity)
}

// SetAttribute is a paid mutator transaction binding the contract method 0x7ad4b0a4.
//
// Solidity: function setAttribute(address identity, bytes32 name, bytes value, uint256 validity) returns()
func (_DidOptimize *DidOptimizeTransactorSession) SetAttribute(identity common.Address, name [32]byte, value []byte, validity *big.Int) (*types.Transaction, error) {
	return _DidOptimize.Contract.SetAttribute(&_DidOptimize.TransactOpts, identity, name, value, validity)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_DidOptimize *DidOptimizeTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _DidOptimize.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_DidOptimize *DidOptimizeSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _DidOptimize.Contract.UpgradeToAndCall(&_DidOptimize.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_DidOptimize *DidOptimizeTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _DidOptimize.Contract.UpgradeToAndCall(&_DidOptimize.TransactOpts, newImplementation, data)
}

// DidOptimizeDIDAttributeChangedIterator is returned from FilterDIDAttributeChanged and is used to iterate over the raw logs and unpacked data for DIDAttributeChanged events raised by the DidOptimize contract.
type DidOptimizeDIDAttributeChangedIterator struct {
	Event *DidOptimizeDIDAttributeChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DidOptimizeDIDAttributeChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DidOptimizeDIDAttributeChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DidOptimizeDIDAttributeChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DidOptimizeDIDAttributeChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DidOptimizeDIDAttributeChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DidOptimizeDIDAttributeChanged represents a DIDAttributeChanged event raised by the DidOptimize contract.
type DidOptimizeDIDAttributeChanged struct {
	Identity       common.Address
	Name           [32]byte
	Value          []byte
	ValidTo        *big.Int
	PreviousChange *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterDIDAttributeChanged is a free log retrieval operation binding the contract event 0x18ab6b2ae3d64306c00ce663125f2bd680e441a098de1635bd7ad8b0d44965e4.
//
// Solidity: event DIDAttributeChanged(address indexed identity, bytes32 name, bytes value, uint256 validTo, uint256 previousChange)
func (_DidOptimize *DidOptimizeFilterer) FilterDIDAttributeChanged(opts *bind.FilterOpts, identity []common.Address) (*DidOptimizeDIDAttributeChangedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _DidOptimize.contract.FilterLogs(opts, "DIDAttributeChanged", identityRule)
	if err != nil {
		return nil, err
	}
	return &DidOptimizeDIDAttributeChangedIterator{contract: _DidOptimize.contract, event: "DIDAttributeChanged", logs: logs, sub: sub}, nil
}

// WatchDIDAttributeChanged is a free log subscription operation binding the contract event 0x18ab6b2ae3d64306c00ce663125f2bd680e441a098de1635bd7ad8b0d44965e4.
//
// Solidity: event DIDAttributeChanged(address indexed identity, bytes32 name, bytes value, uint256 validTo, uint256 previousChange)
func (_DidOptimize *DidOptimizeFilterer) WatchDIDAttributeChanged(opts *bind.WatchOpts, sink chan<- *DidOptimizeDIDAttributeChanged, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _DidOptimize.contract.WatchLogs(opts, "DIDAttributeChanged", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DidOptimizeDIDAttributeChanged)
				if err := _DidOptimize.contract.UnpackLog(event, "DIDAttributeChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDIDAttributeChanged is a log parse operation binding the contract event 0x18ab6b2ae3d64306c00ce663125f2bd680e441a098de1635bd7ad8b0d44965e4.
//
// Solidity: event DIDAttributeChanged(address indexed identity, bytes32 name, bytes value, uint256 validTo, uint256 previousChange)
func (_DidOptimize *DidOptimizeFilterer) ParseDIDAttributeChanged(log types.Log) (*DidOptimizeDIDAttributeChanged, error) {
	event := new(DidOptimizeDIDAttributeChanged)
	if err := _DidOptimize.contract.UnpackLog(event, "DIDAttributeChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DidOptimizeDIDDelegateChangedIterator is returned from FilterDIDDelegateChanged and is used to iterate over the raw logs and unpacked data for DIDDelegateChanged events raised by the DidOptimize contract.
type DidOptimizeDIDDelegateChangedIterator struct {
	Event *DidOptimizeDIDDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DidOptimizeDIDDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DidOptimizeDIDDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DidOptimizeDIDDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DidOptimizeDIDDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DidOptimizeDIDDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DidOptimizeDIDDelegateChanged represents a DIDDelegateChanged event raised by the DidOptimize contract.
type DidOptimizeDIDDelegateChanged struct {
	Identity       common.Address
	DelegateType   [32]byte
	Delegate       common.Address
	ValidTo        *big.Int
	PreviousChange *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterDIDDelegateChanged is a free log retrieval operation binding the contract event 0x5a5084339536bcab65f20799fcc58724588145ca054bd2be626174b27ba156f7.
//
// Solidity: event DIDDelegateChanged(address indexed identity, bytes32 delegateType, address delegate, uint256 validTo, uint256 previousChange)
func (_DidOptimize *DidOptimizeFilterer) FilterDIDDelegateChanged(opts *bind.FilterOpts, identity []common.Address) (*DidOptimizeDIDDelegateChangedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _DidOptimize.contract.FilterLogs(opts, "DIDDelegateChanged", identityRule)
	if err != nil {
		return nil, err
	}
	return &DidOptimizeDIDDelegateChangedIterator{contract: _DidOptimize.contract, event: "DIDDelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDIDDelegateChanged is a free log subscription operation binding the contract event 0x5a5084339536bcab65f20799fcc58724588145ca054bd2be626174b27ba156f7.
//
// Solidity: event DIDDelegateChanged(address indexed identity, bytes32 delegateType, address delegate, uint256 validTo, uint256 previousChange)
func (_DidOptimize *DidOptimizeFilterer) WatchDIDDelegateChanged(opts *bind.WatchOpts, sink chan<- *DidOptimizeDIDDelegateChanged, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _DidOptimize.contract.WatchLogs(opts, "DIDDelegateChanged", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DidOptimizeDIDDelegateChanged)
				if err := _DidOptimize.contract.UnpackLog(event, "DIDDelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDIDDelegateChanged is a log parse operation binding the contract event 0x5a5084339536bcab65f20799fcc58724588145ca054bd2be626174b27ba156f7.
//
// Solidity: event DIDDelegateChanged(address indexed identity, bytes32 delegateType, address delegate, uint256 validTo, uint256 previousChange)
func (_DidOptimize *DidOptimizeFilterer) ParseDIDDelegateChanged(log types.Log) (*DidOptimizeDIDDelegateChanged, error) {
	event := new(DidOptimizeDIDDelegateChanged)
	if err := _DidOptimize.contract.UnpackLog(event, "DIDDelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DidOptimizeDIDOwnerChangedIterator is returned from FilterDIDOwnerChanged and is used to iterate over the raw logs and unpacked data for DIDOwnerChanged events raised by the DidOptimize contract.
type DidOptimizeDIDOwnerChangedIterator struct {
	Event *DidOptimizeDIDOwnerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DidOptimizeDIDOwnerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DidOptimizeDIDOwnerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DidOptimizeDIDOwnerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DidOptimizeDIDOwnerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DidOptimizeDIDOwnerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DidOptimizeDIDOwnerChanged represents a DIDOwnerChanged event raised by the DidOptimize contract.
type DidOptimizeDIDOwnerChanged struct {
	Identity       common.Address
	Owner          common.Address
	PreviousChange *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterDIDOwnerChanged is a free log retrieval operation binding the contract event 0x38a5a6e68f30ed1ab45860a4afb34bcb2fc00f22ca462d249b8a8d40cda6f7a3.
//
// Solidity: event DIDOwnerChanged(address indexed identity, address owner, uint256 previousChange)
func (_DidOptimize *DidOptimizeFilterer) FilterDIDOwnerChanged(opts *bind.FilterOpts, identity []common.Address) (*DidOptimizeDIDOwnerChangedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _DidOptimize.contract.FilterLogs(opts, "DIDOwnerChanged", identityRule)
	if err != nil {
		return nil, err
	}
	return &DidOptimizeDIDOwnerChangedIterator{contract: _DidOptimize.contract, event: "DIDOwnerChanged", logs: logs, sub: sub}, nil
}

// WatchDIDOwnerChanged is a free log subscription operation binding the contract event 0x38a5a6e68f30ed1ab45860a4afb34bcb2fc00f22ca462d249b8a8d40cda6f7a3.
//
// Solidity: event DIDOwnerChanged(address indexed identity, address owner, uint256 previousChange)
func (_DidOptimize *DidOptimizeFilterer) WatchDIDOwnerChanged(opts *bind.WatchOpts, sink chan<- *DidOptimizeDIDOwnerChanged, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _DidOptimize.contract.WatchLogs(opts, "DIDOwnerChanged", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DidOptimizeDIDOwnerChanged)
				if err := _DidOptimize.contract.UnpackLog(event, "DIDOwnerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDIDOwnerChanged is a log parse operation binding the contract event 0x38a5a6e68f30ed1ab45860a4afb34bcb2fc00f22ca462d249b8a8d40cda6f7a3.
//
// Solidity: event DIDOwnerChanged(address indexed identity, address owner, uint256 previousChange)
func (_DidOptimize *DidOptimizeFilterer) ParseDIDOwnerChanged(log types.Log) (*DidOptimizeDIDOwnerChanged, error) {
	event := new(DidOptimizeDIDOwnerChanged)
	if err := _DidOptimize.contract.UnpackLog(event, "DIDOwnerChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DidOptimizeInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the DidOptimize contract.
type DidOptimizeInitializedIterator struct {
	Event *DidOptimizeInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DidOptimizeInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DidOptimizeInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DidOptimizeInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DidOptimizeInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DidOptimizeInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DidOptimizeInitialized represents a Initialized event raised by the DidOptimize contract.
type DidOptimizeInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_DidOptimize *DidOptimizeFilterer) FilterInitialized(opts *bind.FilterOpts) (*DidOptimizeInitializedIterator, error) {

	logs, sub, err := _DidOptimize.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &DidOptimizeInitializedIterator{contract: _DidOptimize.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_DidOptimize *DidOptimizeFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *DidOptimizeInitialized) (event.Subscription, error) {

	logs, sub, err := _DidOptimize.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DidOptimizeInitialized)
				if err := _DidOptimize.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_DidOptimize *DidOptimizeFilterer) ParseInitialized(log types.Log) (*DidOptimizeInitialized, error) {
	event := new(DidOptimizeInitialized)
	if err := _DidOptimize.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DidOptimizePendingApprovedIterator is returned from FilterPendingApproved and is used to iterate over the raw logs and unpacked data for PendingApproved events raised by the DidOptimize contract.
type DidOptimizePendingApprovedIterator struct {
	Event *DidOptimizePendingApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DidOptimizePendingApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DidOptimizePendingApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DidOptimizePendingApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DidOptimizePendingApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DidOptimizePendingApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DidOptimizePendingApproved represents a PendingApproved event raised by the DidOptimize contract.
type DidOptimizePendingApproved struct {
	Id        *big.Int
	Approver  common.Address
	Approvals *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPendingApproved is a free log retrieval operation binding the contract event 0xbd5edb0e5ebba23b8f340c60c454d0c9d03c0feef395ea9dbfb4b1bc8cce7e6e.
//
// Solidity: event PendingApproved(uint256 indexed id, address indexed approver, uint256 approvals)
func (_DidOptimize *DidOptimizeFilterer) FilterPendingApproved(opts *bind.FilterOpts, id []*big.Int, approver []common.Address) (*DidOptimizePendingApprovedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var approverRule []interface{}
	for _, approverItem := range approver {
		approverRule = append(approverRule, approverItem)
	}

	logs, sub, err := _DidOptimize.contract.FilterLogs(opts, "PendingApproved", idRule, approverRule)
	if err != nil {
		return nil, err
	}
	return &DidOptimizePendingApprovedIterator{contract: _DidOptimize.contract, event: "PendingApproved", logs: logs, sub: sub}, nil
}

// WatchPendingApproved is a free log subscription operation binding the contract event 0xbd5edb0e5ebba23b8f340c60c454d0c9d03c0feef395ea9dbfb4b1bc8cce7e6e.
//
// Solidity: event PendingApproved(uint256 indexed id, address indexed approver, uint256 approvals)
func (_DidOptimize *DidOptimizeFilterer) WatchPendingApproved(opts *bind.WatchOpts, sink chan<- *DidOptimizePendingApproved, id []*big.Int, approver []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var approverRule []interface{}
	for _, approverItem := range approver {
		approverRule = append(approverRule, approverItem)
	}

	logs, sub, err := _DidOptimize.contract.WatchLogs(opts, "PendingApproved", idRule, approverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DidOptimizePendingApproved)
				if err := _DidOptimize.contract.UnpackLog(event, "PendingApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePendingApproved is a log parse operation binding the contract event 0xbd5edb0e5ebba23b8f340c60c454d0c9d03c0feef395ea9dbfb4b1bc8cce7e6e.
//
// Solidity: event PendingApproved(uint256 indexed id, address indexed approver, uint256 approvals)
func (_DidOptimize *DidOptimizeFilterer) ParsePendingApproved(log types.Log) (*DidOptimizePendingApproved, error) {
	event := new(DidOptimizePendingApproved)
	if err := _DidOptimize.contract.UnpackLog(event, "PendingApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DidOptimizePendingCreatedIterator is returned from FilterPendingCreated and is used to iterate over the raw logs and unpacked data for PendingCreated events raised by the DidOptimize contract.
type DidOptimizePendingCreatedIterator struct {
	Event *DidOptimizePendingCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DidOptimizePendingCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DidOptimizePendingCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DidOptimizePendingCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DidOptimizePendingCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DidOptimizePendingCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DidOptimizePendingCreated represents a PendingCreated event raised by the DidOptimize contract.
type DidOptimizePendingCreated struct {
	Id        *big.Int
	Action    uint8
	Initiator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPendingCreated is a free log retrieval operation binding the contract event 0x6b75dbcdd90efaba9acffddd7c21135f9405289728c32ab618511a96826ec73b.
//
// Solidity: event PendingCreated(uint256 indexed id, uint8 action, address indexed initiator)
func (_DidOptimize *DidOptimizeFilterer) FilterPendingCreated(opts *bind.FilterOpts, id []*big.Int, initiator []common.Address) (*DidOptimizePendingCreatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}

	logs, sub, err := _DidOptimize.contract.FilterLogs(opts, "PendingCreated", idRule, initiatorRule)
	if err != nil {
		return nil, err
	}
	return &DidOptimizePendingCreatedIterator{contract: _DidOptimize.contract, event: "PendingCreated", logs: logs, sub: sub}, nil
}

// WatchPendingCreated is a free log subscription operation binding the contract event 0x6b75dbcdd90efaba9acffddd7c21135f9405289728c32ab618511a96826ec73b.
//
// Solidity: event PendingCreated(uint256 indexed id, uint8 action, address indexed initiator)
func (_DidOptimize *DidOptimizeFilterer) WatchPendingCreated(opts *bind.WatchOpts, sink chan<- *DidOptimizePendingCreated, id []*big.Int, initiator []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}

	logs, sub, err := _DidOptimize.contract.WatchLogs(opts, "PendingCreated", idRule, initiatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DidOptimizePendingCreated)
				if err := _DidOptimize.contract.UnpackLog(event, "PendingCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePendingCreated is a log parse operation binding the contract event 0x6b75dbcdd90efaba9acffddd7c21135f9405289728c32ab618511a96826ec73b.
//
// Solidity: event PendingCreated(uint256 indexed id, uint8 action, address indexed initiator)
func (_DidOptimize *DidOptimizeFilterer) ParsePendingCreated(log types.Log) (*DidOptimizePendingCreated, error) {
	event := new(DidOptimizePendingCreated)
	if err := _DidOptimize.contract.UnpackLog(event, "PendingCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DidOptimizePendingExecutedIterator is returned from FilterPendingExecuted and is used to iterate over the raw logs and unpacked data for PendingExecuted events raised by the DidOptimize contract.
type DidOptimizePendingExecutedIterator struct {
	Event *DidOptimizePendingExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DidOptimizePendingExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DidOptimizePendingExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DidOptimizePendingExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DidOptimizePendingExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DidOptimizePendingExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DidOptimizePendingExecuted represents a PendingExecuted event raised by the DidOptimize contract.
type DidOptimizePendingExecuted struct {
	Id  *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPendingExecuted is a free log retrieval operation binding the contract event 0x02a26fa44256b4b2305486727e5f378dd9075c942027a96d7c0f16b883b6ea4c.
//
// Solidity: event PendingExecuted(uint256 indexed id)
func (_DidOptimize *DidOptimizeFilterer) FilterPendingExecuted(opts *bind.FilterOpts, id []*big.Int) (*DidOptimizePendingExecutedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _DidOptimize.contract.FilterLogs(opts, "PendingExecuted", idRule)
	if err != nil {
		return nil, err
	}
	return &DidOptimizePendingExecutedIterator{contract: _DidOptimize.contract, event: "PendingExecuted", logs: logs, sub: sub}, nil
}

// WatchPendingExecuted is a free log subscription operation binding the contract event 0x02a26fa44256b4b2305486727e5f378dd9075c942027a96d7c0f16b883b6ea4c.
//
// Solidity: event PendingExecuted(uint256 indexed id)
func (_DidOptimize *DidOptimizeFilterer) WatchPendingExecuted(opts *bind.WatchOpts, sink chan<- *DidOptimizePendingExecuted, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _DidOptimize.contract.WatchLogs(opts, "PendingExecuted", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DidOptimizePendingExecuted)
				if err := _DidOptimize.contract.UnpackLog(event, "PendingExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePendingExecuted is a log parse operation binding the contract event 0x02a26fa44256b4b2305486727e5f378dd9075c942027a96d7c0f16b883b6ea4c.
//
// Solidity: event PendingExecuted(uint256 indexed id)
func (_DidOptimize *DidOptimizeFilterer) ParsePendingExecuted(log types.Log) (*DidOptimizePendingExecuted, error) {
	event := new(DidOptimizePendingExecuted)
	if err := _DidOptimize.contract.UnpackLog(event, "PendingExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DidOptimizeRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the DidOptimize contract.
type DidOptimizeRoleAdminChangedIterator struct {
	Event *DidOptimizeRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DidOptimizeRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DidOptimizeRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DidOptimizeRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DidOptimizeRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DidOptimizeRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DidOptimizeRoleAdminChanged represents a RoleAdminChanged event raised by the DidOptimize contract.
type DidOptimizeRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DidOptimize *DidOptimizeFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*DidOptimizeRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _DidOptimize.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &DidOptimizeRoleAdminChangedIterator{contract: _DidOptimize.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DidOptimize *DidOptimizeFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *DidOptimizeRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _DidOptimize.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DidOptimizeRoleAdminChanged)
				if err := _DidOptimize.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DidOptimize *DidOptimizeFilterer) ParseRoleAdminChanged(log types.Log) (*DidOptimizeRoleAdminChanged, error) {
	event := new(DidOptimizeRoleAdminChanged)
	if err := _DidOptimize.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DidOptimizeRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the DidOptimize contract.
type DidOptimizeRoleGrantedIterator struct {
	Event *DidOptimizeRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DidOptimizeRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DidOptimizeRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DidOptimizeRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DidOptimizeRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DidOptimizeRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DidOptimizeRoleGranted represents a RoleGranted event raised by the DidOptimize contract.
type DidOptimizeRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DidOptimize *DidOptimizeFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*DidOptimizeRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DidOptimize.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &DidOptimizeRoleGrantedIterator{contract: _DidOptimize.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DidOptimize *DidOptimizeFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *DidOptimizeRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DidOptimize.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DidOptimizeRoleGranted)
				if err := _DidOptimize.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DidOptimize *DidOptimizeFilterer) ParseRoleGranted(log types.Log) (*DidOptimizeRoleGranted, error) {
	event := new(DidOptimizeRoleGranted)
	if err := _DidOptimize.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DidOptimizeRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the DidOptimize contract.
type DidOptimizeRoleRevokedIterator struct {
	Event *DidOptimizeRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DidOptimizeRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DidOptimizeRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DidOptimizeRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DidOptimizeRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DidOptimizeRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DidOptimizeRoleRevoked represents a RoleRevoked event raised by the DidOptimize contract.
type DidOptimizeRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DidOptimize *DidOptimizeFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*DidOptimizeRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DidOptimize.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &DidOptimizeRoleRevokedIterator{contract: _DidOptimize.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DidOptimize *DidOptimizeFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *DidOptimizeRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DidOptimize.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DidOptimizeRoleRevoked)
				if err := _DidOptimize.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DidOptimize *DidOptimizeFilterer) ParseRoleRevoked(log types.Log) (*DidOptimizeRoleRevoked, error) {
	event := new(DidOptimizeRoleRevoked)
	if err := _DidOptimize.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DidOptimizeUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the DidOptimize contract.
type DidOptimizeUpgradedIterator struct {
	Event *DidOptimizeUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DidOptimizeUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DidOptimizeUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DidOptimizeUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DidOptimizeUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DidOptimizeUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DidOptimizeUpgraded represents a Upgraded event raised by the DidOptimize contract.
type DidOptimizeUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_DidOptimize *DidOptimizeFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*DidOptimizeUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _DidOptimize.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &DidOptimizeUpgradedIterator{contract: _DidOptimize.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_DidOptimize *DidOptimizeFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *DidOptimizeUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _DidOptimize.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DidOptimizeUpgraded)
				if err := _DidOptimize.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_DidOptimize *DidOptimizeFilterer) ParseUpgraded(log types.Log) (*DidOptimizeUpgraded, error) {
	event := new(DidOptimizeUpgraded)
	if err := _DidOptimize.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
